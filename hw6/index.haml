!!! 5
%html
	%head
		%meta(charset='utf-8')
		%title='Game3js Homework6'
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.5.1/dat.gui.min.js')
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js')
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r81/three.min.js')
		%script(src='../src/OrbitControls.js')
		:css
			body {
				margin: 0;
				overflow: hidden;
			}
			.top {
				position: absolute;
				width: 100%;
				padding: 10px;
				text-align: center;
				top: 1em;
				color: yellow;
			}
	%body
		.top='GP_HW6'
		:javascript
			var scene, camera, renderer, controls;
			var clock = new THREE.Clock();
			var character, skeletonHelper;
			
			init();
			animate();

			function init() {
				scene = new THREE.Scene();

				camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 10000);
				camera.position.set(0, 500, 500);

				renderer = new THREE.WebGLRenderer();
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.setClearColor(0x888888);
				document.body.appendChild(renderer.domElement);
				
				controls = new THREE.OrbitControls(camera, renderer.domElement);
				window.addEventListener('resize', onWindowResize, false);
				
				var gridXZ = new THREE.GridHelper(200, 20, 0xff0000, 0xffffff);
				scene.add(gridXZ);
				
				var light = new THREE.HemisphereLight(0xffffbb, 0x080820, 1);
				scene.add(light);
				
				character = createCharacter();
				scene.add(character);
				
				skeletonHelper = new THREE.SkeletonHelper(character);
				scene.add(skeletonHelper);
			}
			
			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize(window.innerWidth, window.innerHeight);
			}

			function animate() {
			
				var delta = clock.getDelta();
				
				skeletonHelper.update();
				controls.update();
				requestAnimationFrame(animate);
				renderer.render(scene, camera);
			}
			
			function createCharacter() {
			
				var geometry = new THREE.Geometry();
				var material = new THREE.MeshPhongMaterial({ skinning: true, color: 0xff1234 });
				
				var character = new THREE.SkinnedMesh(geometry, material);
				initCharacter(character);
				
				return character;
			}
			
			function initCharacter(character) {
				
				var bodyWidth = 30;
				var bodyHeight = 40;
				var bodyDepth = 20;
				
				var bones = [];
				
				var root = new THREE.Bone();
				root.name = 'Root';
				bones.push(root);
				
					var sacrum = new THREE.Bone();
					sacrum.name = 'Sacrum';
					root.add(sacrum);
					bones.push(sacrum);
					
					var manubrium = new THREE.Bone();
					manubrium.name = 'Manubrium';
					manubrium.position.y = bodyHeight;
					sacrum.add(manubrium);
					bones.push(manubrium);
				
				addGeometry(new THREE.BoxGeometry(bodyWidth, bodyHeight, bodyDepth), function (vertex) {
					
					var bone = (vertex.y > 0) ? manubrium : sacrum;
					
					return [
						new THREE.Vector4(bones.indexOf(bone), 0, 0, 0),
						new THREE.Vector4(1, 0, 0, 0)];
						
				}, new THREE.Matrix4().compose(
					new THREE.Vector3(0, bodyHeight * 0.5, 0),
					new THREE.Quaternion().setFromEuler(new THREE.Euler(0, 0, 0, 'XYZ')),
					new THREE.Vector3(1, 1, 1)
				));
				
				character.add(root);
				character.bind(new THREE.Skeleton(bones));
				
				function addGeometry(geometry, calcSkinParams, matrix) {
					character.geometry.merge(geometry, matrix);
					for (var i = 0; i < geometry.vertices.length; i++) {
						var skinParams = calcSkinParams(geometry.vertices[i], geometry.vertices, i);
						character.geometry.skinIndices.push(skinParams[0]);
						character.geometry.skinWeights.push(skinParams[1]);
					}
				}
			}