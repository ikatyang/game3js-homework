!!! 5
%html
	%head
		%meta(charset='utf-8')
		%title='Game3js Homework4'
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.5.1/dat.gui.min.js')
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js')
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r81/three.min.js')
		%script(src='../src/three.text2d.js')
		%script(src='../src/OrbitControls.js')
		:css
			body {
				margin: 0;
				overflow: hidden;
			}
			.top {
				position: absolute;
				width: 100%;
				padding: 10px;
				text-align: center;
				top: 1em;
				color: yellow;
			}
	%body
		.top='GP_HW4'
		:javascript
			function Agent(geometry, material) {
				
				THREE.Mesh.call(this, geometry, material);
				
				if (!geometry.boundingBox);
					geometry.computeBoundingBox();
					
				this.mass = 1;
				this.front = new THREE.Vector3(0, 0, 1);
				
				this.velocity = new THREE.Vector3(0, 0, 0);
				this.target = new THREE.Vector3(0, 0, 0);
				
				this.maxForce = 50;
				this.maxSpeed = 50;
				
				this.obstacles = [];
				
				this.add(this.maxSeeAheadLine = createLine(0x33ff33));
				this.add(this.maxSeeAheadPoint = createSphere('red'));
				this.add(this.avoidForceLine = createLine('green'));
				
				this.maxSeeAhead = 50;
				this.maxAvoidForce = 60;
				
				this.avoidanceElapsed = 0;
				this.avoidanceDelta = 0.5;
				
				this.init();
				
				function createLine(color) {
					
					var geometry = new THREE.Geometry();
					geometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 0));
					
					return new THREE.Line(geometry, new THREE.LineBasicMaterial({ color: color }));
				}
				
				function createSphere(color) {
					
					return new THREE.Mesh(new THREE.SphereGeometry(1, 16, 16), new THREE.MeshBasicMaterial({ color: color }));
				}
			}
			Agent.prototype = Object.assign(Object.defineProperties(Object.create(THREE.Mesh.prototype), {
				
				maxSeeAhead: {
					get: function () {
						return this._maxSeeAhead;
					},
					set: function (value) {
						this._maxSeeAhead = value;
						this.maxSeeAheadLine.geometry.vertices[1].z = value;
						this.maxSeeAheadLine.geometry.verticesNeedUpdate = true;
						this.maxSeeAheadPoint.position.z = value;
					},
				},
				
			}), {
				
				constructor: Agent,
				
				init: function () {
					this.arrival = false;
					this.avoidance = false;
					this.velocity.set(0, 0, 0);
				},
				
				getPosition: function () {
					var center = this.geometry.boundingBox.getCenter();
					return this.position.clone().add(center.clone().applyMatrix3(this.matrix));
				},
				
				getSeekForce: function () {
					var offset = this.target.clone().sub(this.getPosition());
					var distance = offset.length();
					var seekForce = offset.setLength(this.maxSpeed);
					var ahead = this.maxSeeAhead * (this.velocity.length() / this.maxSpeed);
					if (this.arrival = (distance < ahead)) {
						seekForce.multiplyScalar(Math.pow(distance / ahead, 5));
						
					}
					return seekForce.sub(this.velocity);
				},
				
				getAvoidForce: function () {
					
					var avoidForce = new THREE.Vector3(0, 0, 0);
					
					var position = this.getPosition();
					var size = this.geometry.boundingBox.getSize();
					
					var ahead = this.maxSeeAhead * (this.velocity.length() / this.maxSpeed);
					var halfSize = size.x / 2;
					
					var offsetProjLengthMin = Number.MAX_VALUE;
					for (var i = 0; i < this.obstacles.length; i++) {
						
						var obstacle = this.obstacles[i];
						
						var offset = obstacle.center.clone().sub(position);
						var offsetProj = offset.clone().projectOnVector(this.velocity);
						var offsetProjLength = offsetProj.length();
						var steerOffset = offsetProj.clone().sub(offset);
						
						var inFront = (offset.clone().dot(this.velocity) > 0);
						var needBlock = (steerOffset.length() < obstacle.radius + halfSize);
						var closeEnough = (offsetProjLength < ahead + obstacle.radius);
						
						if (inFront && needBlock && closeEnough && offsetProjLength < offsetProjLengthMin) {
							
							offsetProjLengthMin = offsetProjLength;
							avoidForce.copy(steerOffset.clone().setLength(this.maxAvoidForce));
						}
					}
					
					return avoidForce;
				},
				
				update: function (delta) {
					
					var force = new THREE.Vector3(0, 0, 0);
					
					var seekForce = this.getSeekForce();
					var avoidForce = this.getAvoidForce();
					
					this.avoidanceElapsed += delta;
					if (avoidForce.length() > 0) {
						this.avoidance = true;
						this.avoidanceElapsed = 0;
					} else if (this.avoidanceElapsed > this.avoidanceDelta) {
						this.avoidance = false;
					}
					
					force.add(seekForce).add(avoidForce).clampLength(0, this.maxForce);
					this.velocity.addScaledVector(force, delta / this.mass).clampLength(0, this.maxSpeed);
					this.position.addScaledVector(this.velocity, delta);
					
					var axis = this.front.clone().cross(this.velocity).normalize();
					if (axis.length() === 0)
						axis.set(0, 1, 0);
					
					var angle = this.front.angleTo(this.velocity) || 0;
					var matrix = new THREE.Matrix4().makeRotationAxis(axis, angle);
					this.rotation.setFromRotationMatrix(matrix);
					
					this.maxSeeAheadPoint.position.z = this.maxSeeAhead * (this.velocity.length() / this.maxSpeed);
					
					var origin = this.worldToLocal(this.parent.localToWorld(new THREE.Vector3(0, 0, 0)));
					var avoidForceInGeometryCoord = this.worldToLocal(this.parent.localToWorld(avoidForce.clone())).sub(origin);
					
					this.avoidForceLine.geometry.vertices[1].copy(avoidForceInGeometryCoord);
					this.avoidForceLine.geometry.verticesNeedUpdate = true;
				},
				
			});
			
			function AgentGeometry(width, height, depth) {
				
				THREE.Geometry.call(this);
				
				this.type = 'AgentGeometry';
				
				this.parameters = {
					width: width,
					height: height,
					depth: depth,
				};
				
				this.vertices.push(
					new THREE.Vector3(0, 0, depth / 2),
					new THREE.Vector3(width / 2, 0, -depth / 2),
					new THREE.Vector3(-width / 2, 0, -depth / 2),
					new THREE.Vector3(0, height, -depth / 2));
				
				this.faces.push(
					new THREE.Face3(1, 3, 2),
					new THREE.Face3(0, 3, 1),
					new THREE.Face3(3, 0, 2),
					new THREE.Face3(1, 2, 0));
				
				this.computeFaceNormals();
				this.computeVertexNormals();
			}
			AgentGeometry.prototype = Object.create(THREE.Geometry.prototype);
			AgentGeometry.prototype.constructor = AgentGeometry;
		:javascript
			var scene, camera, renderer, controls;
			var agents, clock, target, obstacles;
			var raycaster, pickables, intersects;
			var agentCount = 5, obstacleCount = 10;
			var autoRestart = true;
			var groundWidth = 400;
			
			init();
			animate();

			function init() {
				scene = new THREE.Scene();

				camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);
				camera.position.set(0, 500, 0);

				renderer = new THREE.WebGLRenderer();
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.setClearColor(0x888888);
				document.body.appendChild(renderer.domElement);
				
				controls = new THREE.OrbitControls(camera, renderer.domElement);
				
				var gridXZ = new THREE.GridHelper(groundWidth / 2, groundWidth / 20, 0xff0000, 0xffffff);
				scene.add(gridXZ);
				
				obstacles = [];
				
				for (var i = 0; i < obstacleCount; i++)
					addObstacle();
				
				agents = [];
				clock = new THREE.Clock();
				
				target = new THREE.Mesh(
					new THREE.SphereGeometry(5, 12, 12),
					new THREE.MeshNormalMaterial());
				target.position.copy(getRandomPosition(5));
				scene.add(target);
				
				for (var i = 0; i < agentCount; i++)
					addAgent();
				
				resetAgents();
				
				pickables = [];
				raycaster = new THREE.Raycaster();
				
				var pickable = new THREE.Mesh(
					new THREE.PlaneGeometry(groundWidth, groundWidth),
					new THREE.MeshBasicMaterial({ visible: false }));
				pickable.rotation.x = -Math.PI / 2;
				pickables.push(pickable);
				scene.add(pickable);
				
				var gui = new dat.GUI();
				
				gui.add(window, 'autoRestart');
				gui.add(window, 'agentCount', 1, 20).step(1).onChange(function () {
					while (agentCount < agents.length) {
						var agent = agents.pop();
						scene.remove(agent);
					}
					while (agentCount > agents.length) {
						addAgent();
						resetAgent(agents[agents.length - 1]);
					}
				});
				gui.add(window, 'obstacleCount', 0, 20).step(1).onChange(function () {
					while (obstacleCount < obstacles.length) {
						var obstacle = obstacles.pop();
						scene.remove(obstacle.mesh);
					}
					while (obstacleCount > obstacles.length) {
						addObstacle();
					}
				});
				
				window.addEventListener('resize', onWindowResize, false);
				document.addEventListener('mouseup', onDocumentMouseUp, false);
				document.addEventListener('mousedown', onDocumentMouseDown, false);
				document.addEventListener('mousemove', onDocumentMouseMove, false);
			}
			
			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize(window.innerWidth, window.innerHeight);
			}
			
			function onDocumentMouseUp(event) {
				if (renderer.domElement.style.cursor === 'pointer' && onDocumentMouseDown.clientX === event.clientX && onDocumentMouseDown.clientY === event.clientY && intersects.length > 0) 
					target.position.copy(intersects[0].point.clone().setY(0));
			}
			
			function onDocumentMouseDown(event) {
				onDocumentMouseDown.clientX = event.clientX;
				onDocumentMouseDown.clientY = event.clientY;
			}
			
			function onDocumentMouseMove(event) {
				
				var mouse = new THREE.Vector2(
					(event.clientX / window.innerWidth) * 2 - 1,
					-(event.clientY / window.innerHeight) * 2 + 1);
				
				raycaster.setFromCamera(mouse, camera);
				intersects = raycaster.intersectObjects(pickables);
				
				renderer.domElement.style.cursor = (intersects.length > 0 && !isObstacleCollision(intersects[0].point, 5)) ? 'pointer' : 'default';
			}
			
			function addObstacle() {
				
				var radius = Math.random() * 30 + 10;
				
				var cylinder = new THREE.Mesh(
					new THREE.CylinderGeometry(radius, radius, 5, 16),
					new THREE.MeshNormalMaterial());
				
				cylinder.position.copy(getRandomPosition(radius + 20));
					
				scene.add(cylinder);
				
				var obstacle = new THREE.Sphere(cylinder.position, radius);
				obstacle.mesh = cylinder;
				
				obstacles.push(obstacle);
			}
			
			function addAgent() {
				
				var agent = new Agent(
					new AgentGeometry(15, 10, 30),
					new THREE.MeshNormalMaterial({ wireframe: true }));
				agent.target = target.position;
				agent.obstacles = obstacles;
				agents.push(agent);
				scene.add(agent);
				
				var spriteText = new THREE.SpriteText2D('123', {
					align: THREE.textAlign.center,
					font: '12px Courier',
					fillStyle: '#000000',
					antialias: true,
				});
				spriteText.position.y = 30;
				agent.add(agent.spriteText = spriteText);
			}
			
			function isObstacleCollision(position, distance) {
				
				for (var i = 0; i < obstacles.length; i++) {
						
					var obstacle = obstacles[i];
					
					if (obstacle.center.clone().sub(position).length() < obstacle.radius + distance)
						return true;
				}
				
				return false;
			}
			
			function getRandomPosition(distance) {
				
				var position = new THREE.Vector3(0, 0, 0);
				
				var hasCollision = true;
				while (hasCollision) {
					
					position.x = Math.random() * groundWidth - groundWidth / 2;
					position.z = Math.random() * groundWidth - groundWidth / 2;
					
					hasCollision = isObstacleCollision(position, distance);
				}
				
				return position;
			}
			
			function resetAgents() {
				for (var i = 0; i < agents.length; i++)
					resetAgent(agents[i]);
			}
			
			function resetAgent(agent) {
					
				if (!agent.geometry.boundingSphere)
					agent.geometry.computeBoundingSphere();
				
				agent.init();
				
				do {
					agent.position.copy(getRandomPosition(agent.geometry.boundingSphere.radius));
				} while (agent.position.clone().sub(target.position).length() < 100);
			}

			function animate() {
				var delta = clock.getDelta();
				
				for (var i = 0; i < agents.length; i++) {
					
					var agent = agents[i];
					
					agent.update(delta);
					agent.spriteText.text = agent.arrival ? 'Arrival' : agent.avoidance ? 'Avoidance' : 'Seek';
					
					if (autoRestart && agent.position.clone().sub(target.position).length() < 10) {
						resetAgents();
						break;
					}	
				}
				controls.update();
				requestAnimationFrame(animate);
				renderer.render(scene, camera);
			}
