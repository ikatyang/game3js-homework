!!! 5
%html
	%head
		%meta(charset='utf-8')
		%title='Game3js Homework0'
		%script(src='../res/libraries/jquery.min.js')
		%script(src='../res/libraries/three.r76.min.js')
		%script(src='../res/libraries/OrbitControls.js')
		:css
			.top {
				position: absolute;
				top: 1em;
				width: 100%;
				padding: 10px;
				text-align: center;
			}

			body {
				margin: 0;
				overflow: hidden;
			}
	%body
		.top='GP_HW0'
		:javascript
			var scene, camera, renderer;
			var controls;
			var thomas, bodyAngle = 0, wheelAngle = 0, radius = 100;

			init();
			animate();

			function init() {
				scene = new THREE.Scene();

				camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);
				camera.position.set(0, 200, 200);

				renderer = new THREE.WebGLRenderer();
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.setClearColor(0x888888);
				document.body.appendChild(renderer.domElement);

				controls = new THREE.OrbitControls(camera, renderer.domElement);

				var gridXZ = new THREE.GridHelper(100, 10);
				gridXZ.setColors(new THREE.Color(0xff0000), new THREE.Color(0xffffff));
				scene.add(gridXZ);

				thomas = createThomas();
				scene.add(thomas);

				var orbit = new THREE.Mesh(
				new THREE.RingGeometry(radius - 4, radius + 4, 32),
				new THREE.MeshNormalMaterial());
				orbit.rotation.x = -Math.PI / 2;
				scene.add(orbit);

				window.addEventListener('resize', onWindowResize, false);
			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize(window.innerWidth, window.innerHeight);
			}

			function animate() {
				wheelAngle += 0.03;
				bodyAngle -= 0.01;
				thomas.rotation.y = Math.PI - bodyAngle;
				thomas.position.set(radius * Math.cos(bodyAngle), 0, radius * Math.sin(bodyAngle));
				thomas.wheel1.rotation.x = wheelAngle;
				thomas.wheel2.rotation.x = wheelAngle;
				thomas.wheel3.rotation.x = wheelAngle;
				thomas.wheekSticks.position.set(0, 2 * Math.cos(wheelAngle), 2 * Math.sin(wheelAngle));
				controls.update();
				requestAnimationFrame(animate);
				renderer.render(scene, camera);
			}

			function createThomas() {
				var thomas = new THREE.Object3D();

				var material = new THREE.MeshNormalMaterial({
					side: THREE.DoubleSide
				});

				var body = new THREE.Mesh(
					new THREE.BoxGeometry(10, 10, 30),
					material);
				body.position.y = 11.5;
				thomas.add(body);

				var shoulder = new THREE.Mesh(
					new THREE.CylinderGeometry(5, 5, 10, 8, 8, false, 0, Math.PI),
					material);
				shoulder.rotation.z = Math.PI / 2;
				shoulder.position.y = -5;
				shoulder.position.z = 15;
				body.add(shoulder);

				var neck = new THREE.Mesh(
					new THREE.BoxGeometry(6, 10, 5),
					material);
				neck.position.z = 17.5;
				body.add(neck);

				var smokestack = new THREE.Mesh(
					new THREE.CylinderGeometry(0.5, 1, 10),
					material);
				smokestack.position.y = 5;
				neck.add(smokestack);

				var head = new THREE.Mesh(
					new THREE.CylinderGeometry(3, 3, 20),
					material);
				head.rotation.x = Math.PI / 2;
				head.position.y = 5;
				head.position.z = 10;
				body.add(head);

				var face = new THREE.Mesh(
					new THREE.SphereGeometry(3, 8, 8),
					material);
				face.position.y = 10;
				head.add(face);

				var back = new THREE.Mesh(
					new THREE.BoxGeometry(10, 5, 10),
					material);
				back.position.y = 7.5;
				back.position.z = -5;
				body.add(back);

				var backtop = new THREE.Mesh(
					new THREE.CylinderGeometry(5, 5, 10, 8, 8, false, 0, Math.PI),
					material);
				backtop.rotation.y = Math.PI / 2;
				backtop.rotation.z = Math.PI / 2;
				backtop.position.y = 2.5;
				back.add(backtop);

				var backplane = new THREE.Mesh(
					new THREE.PlaneGeometry(10, 3),
					material);
				backplane.rotation.y = Math.PI;
				backplane.position.y = 6.5;
				backplane.position.z = -15;
				body.add(backplane);

				var backplaneLeft = new THREE.Mesh(
					new THREE.PlaneGeometry(5, 3),
					material);
				backplaneLeft.rotation.y = -Math.PI / 2;
				backplaneLeft.position.x = -5;
				backplaneLeft.position.y = 6.5;
				backplaneLeft.position.z = -12.5;
				body.add(backplaneLeft);

				var backplaneRight = backplaneLeft.clone();
				backplaneRight.rotation.y *= -1;
				backplaneRight.position.x *= -1;
				body.add(backplaneRight);

				var bottom = new THREE.Mesh(
					new THREE.BoxGeometry(12, 1, 37),
					material);
				bottom.position.y = -5.5;
				bottom.position.z = 2.5;
				body.add(bottom);

				var bottomBack = new THREE.Mesh(
					new THREE.BoxGeometry(12, 3, 1),
					material);
				bottomBack.position.y = -1;
				bottomBack.position.z = -18;
				bottom.add(bottomBack);

				var bottomFront = new THREE.Mesh(
					new THREE.BoxGeometry(12, 3, 1),
					material);
				bottomFront.position.y = -1;
				bottomFront.position.z = 18;
				bottom.add(bottomFront);

				var wheel1 = new THREE.Mesh(
					new THREE.CylinderGeometry(4, 4, 8, 4),
					material);
				wheel1.rotation.z = Math.PI / 2;
				wheel1.position.y = -2;
				wheel1.position.z = 12.5;
				bottom.add(wheel1);
				thomas.wheel1 = wheel1;

				var wheel2 = wheel1.clone();
				wheel2.position.z = 0;
				bottom.add(wheel2);
				thomas.wheel2 = wheel2;

				var wheel3 = wheel1.clone();
				wheel3.position.z *= -1;
				bottom.add(wheel3);
				thomas.wheel3 = wheel3;

				var wheekSticks = new THREE.Object3D();
				bottom.add(wheekSticks);
				thomas.wheekSticks = wheekSticks;

				var wheekStick1 = new THREE.Mesh(
					new THREE.BoxGeometry(1, 2, 25),
					material);
				wheekStick1.position.y = -2;
				wheekStick1.position.x = -4.5;
				wheekSticks.add(wheekStick1);

				var wheekStick2 = wheekStick1.clone();
				wheekStick2.position.x *= -1;
				wheekSticks.add(wheekStick2);

				return thomas;
			}
