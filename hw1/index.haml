!!! 5
%html
	%head
		%meta(charset='utf-8')
		%title='Game3js Homework1'
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js')
		%script(src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r76/three.min.js')
		%script(src='../src/OrbitControls.js')
		%script(src='../src/KeyboardState.js')
		:css
			.top {
				position: absolute;
				top: 1em;
				width: 100%;
				padding: 10px;
				text-align: center;
				color: yellow;
			}
			
			.bottom {
				position: absolute;
				bottom: 1em;
				left: 2em;
				width: calc(100% - 4em);
				height: 1.5em;
				background: white;
				text-align: center;
			}
			
			.progressBar, .progressInfo {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				text-align: center;
			}
			
			.progressBar {
				width: 0;
			}

			body {
				margin: 0;
				overflow: hidden;
			}
	%body
		.top
			%div='GP_HW1'
			.info
		.bottom
			.progressBar
			.progressInfo='press home to toggle engine, space to brake'
		:javascript
			var scene, camera, renderer;
			var controls, keyboardState, clock;
			var r2d2, velocity, angle = 0, mass = 1;
			var power = 0, powerMax = 80, powerMin = 0, powerOn = false;

			init();
			animate();

			function init() {
				scene = new THREE.Scene();

				camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);
				camera.position.set(0, 200, 200);

				renderer = new THREE.WebGLRenderer();
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.setClearColor(0x888888);
				document.body.appendChild(renderer.domElement);
				
				controls = new THREE.OrbitControls(camera, renderer.domElement);
				controls.enableKeys = false;
				
				keyboardState = new KeyboardState();
				
				var gridXZ = new THREE.GridHelper(100, 10);
				gridXZ.setColors(new THREE.Color(0xff0000), new THREE.Color(0xffffff));
				scene.add(gridXZ);
				
				var light = new THREE.HemisphereLight( 0xffffff, 0x000000, 3);
				scene.add(light);
				
				power = 10;
				velocity = new THREE.Vector3(0, 0, 0);
				
				$('.info').text('loading ... ');
				var loadingTime = 0;
				var loadingMessage = setInterval(function () {
					$('.info').text('loading ... ' + (++loadingTime) + 's');
				}, 1000);
				var loader = new THREE.ObjectLoader();
				loader.load('../src/models/R2D2/r2-d2.json', function (object) {
					object.scale.set(0.1, 0.1, 0.1);
					scene.add(object);
					clearInterval(loadingMessage);
					$('.info').text('arrow keys to drive');
					r2d2 = object;
				});

				window.addEventListener('resize', onWindowResize, false);
			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize(window.innerWidth, window.innerHeight);
			}

			function animate() {
				if (r2d2) {
					if (!clock)
						clock = new THREE.Clock();
					var delta = clock.getDelta();
					var force = (!powerOn || keyboardState.pressed('space')) ? new THREE.Vector3(0, 0, 0) :
						new THREE.Vector3(0, 0, -power).applyAxisAngle(new THREE.Vector3(0, 1, 0), angle);
					force.add(velocity.clone().multiplyScalar(-0.5));
					velocity.add(force.clone().multiplyScalar(delta / mass));
					r2d2.position.add(velocity.clone().multiplyScalar(delta));
					r2d2.rotation.y = angle;
					if (keyboardState.pressed('left'))
						angle += 0.05;
					if (keyboardState.pressed('right'))
						angle -= 0.05;
					if (keyboardState.pressed('up'))
						power += 0.5;
					if (keyboardState.pressed('down'))
						power -= 0.5;
					if (keyboardState.down('home'))
						powerOn = !powerOn;
					if (power > powerMax)
						power = powerMax;
					if (power < powerMin)
						power = powerMin;
				}
				$('.progressBar').css('width', ((power - powerMin) / (powerMax - powerMin) * 100) + '%');
				$('.progressBar').css('background', (powerOn && !keyboardState.pressed('space')) ? 'red' : 'lightgray');
				controls.update();
				keyboardState.update();
				requestAnimationFrame(animate);
				renderer.render(scene, camera);
			}
